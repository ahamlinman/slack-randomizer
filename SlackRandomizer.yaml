Description: An API for a "randomizer" slash command in Slack

Parameters:
  SlackToken:
    Description: The token sent by Slack to authenticate itself (from the slash command settings)
    Type: String
    NoEcho: true
  ThrottleRate:
    Description: The requests per second rate for API Gateway throttling
    Type: Number
    Default: '25'
  ThrottleBurst:
    Description: The burst amount for API Gateway throttling
    Type: Number
    Default: '100'
  ApiStageName:
    Description: The name of the API's deployed stage (the path segment in the API URL)
    Type: String
    Default: default

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Slack Randomizer
      Description: API for a "randomizer" slash command in Slack

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: {Ref: RestApi}
      ResourceId: {'Fn::GetAtt': [RestApi, RootResourceId]}
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.token: true
        method.request.querystring.text: false
        method.request.querystring.ssl_check: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join': [
            '',
            ['arn:aws:apigateway:', {Ref: 'AWS::Region'}, ':lambda:path/2015-03-31/functions/', {'Fn::GetAtt': [LambdaFunction, Arn]}, '/invocations']
          ]
        RequestTemplates:
          application/json: |-
            {
              "token": "$input.params('token')",
              "text": "$input.params('text')",
              "ssl_check": "$input.params('ssl_check')"
            }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: '200'
          - SelectionPattern: '.*incorrect token.*'
            StatusCode: '403'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: {Ref: SlackResponseModel}
        - StatusCode: '403'

  SlackResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: {Ref: RestApi}
      Description: A response for Slack's slash command integration
      ContentType: application/json
      Schema:
        title: Slack Response
        type: object
        properties:
          response_type:
            type: string
          text:
            type: string

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetMethod
    Properties:
      RestApiId: {Ref: RestApi}
      StageName: {Ref: ApiStageName}
      StageDescription:
        ThrottlingRateLimit: {Ref: ThrottleRate}
        ThrottlingBurstLimit: {Ref: ThrottleBurst}

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource:
                  'Fn::Join': [
                    '',
                    ['arn:aws:logs:', {Ref: 'AWS::Region'}, ':', {Ref: 'AWS::AccountId'}, ':*']
                  ]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  'Fn::Join': [
                    '',
                    ['arn:aws:logs:', {Ref: 'AWS::Region'}, ':', {Ref: 'AWS::AccountId'}, ':log-group:/aws/lambda/*']
                  ]

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: {'Fn::GetAtt': [LambdaFunction, Arn]}
      Principal: apigateway.amazonaws.com
      Action: lambda:invokeFunction
      SourceArn:
        'Fn::Join': [
          '',
          ['arn:aws:execute-api:', {Ref: 'AWS::Region'}, ':', {Ref: 'AWS::AccountId'}, ':', {Ref: RestApi}, '/*']
        ]

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: API Gateway backend for a "randomizer" slash command in Slack
      Role: {'Fn::GetAtt': [LambdaRole, Arn]}
      Environment:
        Variables:
          SLACK_TOKEN: {Ref: SlackToken}
      Runtime: python3.6
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import os
          import random

          def lambda_handler(event, context):
            # really crappy comparison for really limited protection
            if event['token'] != os.getenv('SLACK_TOKEN'):
              raise Exception('incorrect token')

            if event['ssl_check']:
              return None

            options = event['text'].split()
            if len(options) < 2:
              return { 'text': 'Hey, I need things to randomize!' }

            choice = random.choice(options)
            return {
              'response_type': 'in_channel',
              'text': 'I chooseâ€¦ *{}*'.format(choice)
            }

Outputs:
  ApiUrl:
    Description: The URL to paste into a Slack slash command integration in GET mode
    Value:
      'Fn::Join': [
        '',
        ['https://', {Ref: RestApi}, '.execute-api.', {Ref: 'AWS::Region'}, '.amazonaws.com/', {Ref: ApiStageName}]
      ]
